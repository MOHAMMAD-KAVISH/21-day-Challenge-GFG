#include <iostream>
#include <stack>
using namespace std;

// Definition for a binary tree node.
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    Node* bToDLL(Node* root) {
        if (!root) return nullptr;

        Node* head = nullptr;
        Node* prev = nullptr;
        stack<Node*> st;
        Node* curr = root;

        while (curr != nullptr || !st.empty()) {
            // Go to the leftmost node
            while (curr != nullptr) {
                st.push(curr);
                curr = curr->left;
            }

            // Process the current node
            curr = st.top();
            st.pop();

            if (prev == nullptr) {
                head = curr;  // This will be the head of DLL (leftmost node)
            } else {
                // Link the current node with the previous node in DLL
                prev->right = curr;
                curr->left = prev;
            }
            prev = curr;  // Move previous pointer to the current node

            // Now move to the right subtree
            curr = curr->right;
        }

        return head;  // Return the head of the doubly linked list
    }
};

// Utility function to print the doubly linked list
void printDLL(Node* head) {
    Node* curr = head;
    while (curr) {
        cout << curr->data << " ";
        curr = curr->right;
    }
    cout << endl;
}

int main() {
    // Example 1
    Node* root = new Node(1);
    root->left = new Node(3);
    root->right = new Node(2);

    Solution sol;
    Node* dllHead = sol.bToDLL(root);

    // Output: 3 1 2 (DLL in inorder traversal order)
    printDLL(dllHead);

    // Example 2
    Node* root2 = new Node(10);
    root2->left = new Node(20);
    root2->right = new Node(30);
    root2->left->left = new Node(40);
    root2->left->right = new Node(60);

    Node* dllHead2 = sol.bToDLL(root2);

    // Output: 40 20 60 10 30 (DLL in inorder traversal order)
    printDLL(dllHead2);

    return 0;
}
