#include <iostream>
using namespace std;

// Definition for a Node.
class Node {
public:
    int data;
    Node* next;
    Node* random;
    
    Node(int val) {
        data = val;
        next = nullptr;
        random = nullptr;
    }
};

// Function to copy the linked list with random pointers
Node* copyRandomList(Node* head) {
    if (head == nullptr) return nullptr;
    
    // Step 1: Create new nodes and interleave them with the original list
    Node* curr = head;
    while (curr != nullptr) {
        Node* newNode = new Node(curr->data);
        newNode->next = curr->next;
        curr->next = newNode;
        curr = newNode->next;
    }
    
    // Step 2: Assign random pointers to the copied nodes
    curr = head;
    while (curr != nullptr) {
        if (curr->random != nullptr) {
            curr->next->random = curr->random->next;
        }
        curr = curr->next->next;
    }
    
    // Step 3: Separate the copied list from the original list
    curr = head;
    Node* copyHead = head->next;
    Node* copyCurr = copyHead;
    
    while (curr != nullptr) {
        curr->next = curr->next->next;
        if (copyCurr->next != nullptr) {
            copyCurr->next = copyCurr->next->next;
        }
        curr = curr->next;
        copyCurr = copyCurr->next;
    }
    
    return copyHead;
}

// Helper function to print the list along with random pointers
void printList(Node* head) {
    while (head != nullptr) {
        cout << "Node: " << head->data;
        if (head->random != nullptr) {
            cout << ", Random: " << head->random->data;
        } else {
            cout << ", Random: NULL";
        }
        cout << endl;
        head = head->next;
    }
}

int main() {
    // Creating a test linked list
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);

    // Setting up random pointers
    head->random = head->next; // 1 -> 2
    head->next->random = head->next->next->next; // 2 -> 4

    cout << "Original List:" << endl;
    printList(head);

    // Cloning the list
    Node* clonedList = copyRandomList(head);

    cout << "\nCloned List:" << endl;
    printList(clonedList);

    return 0;
}
